<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 自动扫描两种方式 -->
    <context:component-scan base-package="com.ts.ssm" />

    <!-- 自动扫描 -->
    <!--<context:include-filter>和<context:exclude-filter>各代表引入和排除的过滤。-->
    <!--<context:component-scan base-package="com.ts.ssm" use-default-filters="true">
        controller注解由ioc管理
        <context:include-filter  type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>-->

    <!-- 引入配置文件两种方式 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 引入数据库配置文件 -->
    <!--<bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>-->

    <bean id = "dataSource" class = "org.apache.commons.dbcp.BasicDataSource"
          destroy-method = "close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.maxWait}" />
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id = "sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置MyBatis全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <!-- 指定mybatis,mapper文件的位置 -->
        <!--如果在mybatis-config.xml利用<mappers>进行xml映射文件的配置，就可以不用配置下面的mapperLocation属性了-->
        <property name = "mapperLocations" value="classpath:com/ts/ssm/dao/mapping/*.xml" />
    </bean>


    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ts.ssm.dao.mapping" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!--配合注解使用-->
   <!-- &lt;!&ndash;创建数据映射器，数据映射器必须为接口&ndash;&gt;
    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.ts.ssm.dao.mapping.UserMapper" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>-->

  <!--  <bean id="userDaoImpl" class="com.xxt.ibatis.dbcp.dao.impl.UserDaoImpl">
        <property name="userMapper" ref="userMapper"/>
    </bean>-->
    <!--使用注解的两种方式-->
    <!--配置事务管理器，需要提供连接池属性-->
    <bean id = "transactionManager" class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name = "dataSource" ref = "dataSource" />
    </bean>
    <tx:advice id="tx_transactionManager" transaction-manager="transactionManager" >
        <tx:attributes>
            <!--read-only="true"-->
            <tx:method name="*" propagation="REQUIRED"  no-rollback-for="java.lang.ArithmeticException"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="tx_pointcut" expression="execution(* com.ts.ssm.service.serviceImpl..*(..))"></aop:pointcut>
        <aop:advisor advice-ref="tx_transactionManager" pointcut-ref="tx_pointcut"  ></aop:advisor>
    </aop:config>
    <!-- 使用注解定义事务 -->
    <!--写成<tx:annotation-driven/>时默认加载名为transactionManager的事务管理器-->
    <!--<tx:annotation-driven transaction-manager = "transactionManager" />-->
</beans>